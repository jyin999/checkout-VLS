<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="PRG_VLS_WINDOW" Id="{06bf4e71-7665-4602-9a1f-3fc3cd0692b8}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PRG_VLS_WINDOW
VAR
	xFirstPass		: BOOL;
	fbFSInit		: R_TRIG;
	
	state			: E_STATES;

	bOverride		: BOOL;
	bSetup			: BOOL;
	

END_VAR
VAR_INPUT
	bExtPress		: BOOL := FALSE; // Input for external interlock with hutch vacuum system
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[fbFSInit( CLK := TRUE, Q => xFirstPass);
(* On first PLC pass, put valve into init state*)
IF xFirstPass THEN
	state:= E_STATES.INIT;
	bOverride := FALSE;
	bSetup := FALSE;
END_IF


//STATE ACTIONS
CASE state OF

 E_STATES.INIT: 
		VGC_1.M_Set_OPN_SW(FALSE); //Isolation Valve closed
		VGC_W.M_Set_CLS_SW(FALSE); // Window valve OPEN
		VGC_1.i_xOverrideMode := VGC_W.i_xOverrideMode := FALSE;
		//Transition
		if (VGC_1.M_IsClosed() AND VGC_W.M_IsOpen()) THEN
			state:= E_STATES.NOT_SAFE;
		END_IF
		
E_STATES.NOT_SAFE: // System is not allowed to actuate, i.e all interlocks are in effect
	VGC_1.M_Set_OPN_SW(VGC_1.iq_stValve.q_xOPN_DO );
 	//C_1.i_xExt_OK := VGC_1.i_xEPS_OPN_OK := VGC_1.i_xEPS_CLS_OK:= FALSE; 
	VGC_W.i_xExtILK_OK:= FALSE; 
	VGC_1.i_xOverrideMode := VGC_W.i_xOverrideMode := FALSE;

	//Transition
	//IF (US_GCC.IG.xAT_VAC AND DS_GCC.IG.xAT_VAC) THEN state:= E_STATES.READY; END_IF
	IF (bExtPress AND DS_GCC.IG.xAT_VAC) THEN state:= E_STATES.READY; END_IF
	
	
	
 E_STATES.READY: // OK to MOVE
 	// Release the external interlock so the differential pressure inlk is in effect
 	VGC_1.i_xExt_OK:= VGC_1.i_xEPS_OK :=TRUE;
	//permission to insert window valve only when US vacuum is good??
	VGC_W.i_xExtILK_OK:= bExtPress;
	// Valves  alternate positions.
	If (VGC_W.M_IsClosed()) THEN  VGC_1.M_Set_OPN_SW(TRUE);
	ELSIF (VGC_W.M_IsOpen()) THEN VGC_1.M_Set_OPN_SW(FALSE);
	END_IF
	
 
 E_STATES.OVERRIDE: 
	// Override Mode is enabled for all valves
 	VGC_1.i_xOverrideMode :=VGC_W.i_xOverrideMode := TRUE;
	// Exit of Override mode always goes back to init
 	IF NOT(bOverride) THEN state:= E_STATES.INIT; END_IF
	
	
 E_STATES.SETUP: 
	// Window valve remains retracted
 	VGC_W.i_xExtILK_OK := FALSE; 
	// Isolation valves operates like standard gate valves 
	VGC_1.i_xExt_OK := TRUE;
	// exit to init just to be safe?
	IF NOT(bSetup) THEN state:= E_STATES.INIT; END_IF
END_CASE


// STATE TRANSITIONS
// the system can go to setup state from any other state except override
IF (bSetup) AND (state<>E_STATES.OVERRIDE) THEN state:= E_STATES.SETUP; 
// the system can go to override state from any other state except setup
ELSIF (bOverride) AND (state<>E_STATES.SETUP) THEN state:= E_STATES.OVERRIDE;
//Loss of at vac signal makes the system go to init/not safe to move state
ELSIF (NOT bExtPress) OR (NOT DS_GCC.IG.xAT_VAC) THEN state:= E_STATES.INIT;
//ELSIF (NOT US_GCC.IG.xAT_VAC) OR (NOT DS_GCC.IG.xAT_VAC) THEN state:= E_STATES.INIT;
END_IF 


// Instantiate function blocks
US_GPI(PG=>);
//US_GCC(PG:=US_GPI.PG);
DS_GPI(PG=>);
DS_GCC(PG:=DS_GPI.PG , IG=> , bEP := TRUE );

ROUGH_GPI.M_SetBits(32767);
ROUGH_GPI(PG=>);

VGC_1(
	i_stUSG:= US_GCC.IG , 
	i_stDSG:= DS_GCC.IG , 
	i_xDis_DPIlk:= FALSE , 
	i_xPMPS_OK:= , 
	i_xEPS_OK:= , 
	i_xExt_OK:= , 
	i_xOverrideMode:= , 
	i_xReset:= , 
	i_xIsAperture:= FALSE, 
	i_sDevName:= , 
	i_nTransitionRootID:=  1000,
	iq_stValve=> , 
	xMPS_OK=> , 
	io_fbFFHWO:=g_FastFaultOutput2 , 
	fbArbiter:=fbArbiter);


VGC_W(
	i_xExtILK_OK:= , 
	i_xOverrideMode:= , 
	iq_stValve=> , 
	io_fbFFHWO:= g_FastFaultOutput2 , 
	fbArbiter:= fbArbiter, 
	i_xPMPS_OK:= , 
	i_xIsAperture:= TRUE , 
	i_sDevName:= , 
	i_nTransitionRootID:= 2000);
	
	
//VGC_W(i_xExtILK_OK:= , 
//	i_xOverrideMode:= ,
 //   iq_stValve=> );


]]></ST>
    </Implementation>
    <LineIds Name="PRG_VLS_WINDOW">
      <LineId Id="3" Count="21" />
      <LineId Id="187" Count="0" />
      <LineId Id="25" Count="5" />
      <LineId Id="127" Count="0" />
      <LineId Id="126" Count="0" />
      <LineId Id="31" Count="6" />
      <LineId Id="39" Count="20" />
      <LineId Id="63" Count="8" />
      <LineId Id="130" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="76" Count="5" />
      <LineId Id="287" Count="0" />
      <LineId Id="285" Count="1" />
      <LineId Id="284" Count="0" />
      <LineId Id="170" Count="0" />
      <LineId Id="172" Count="14" />
      <LineId Id="171" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="219" Count="8" />
      <LineId Id="95" Count="0" />
      <LineId Id="229" Count="1" />
      <LineId Id="96" Count="4" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>